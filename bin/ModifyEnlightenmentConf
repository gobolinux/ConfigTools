#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Quick and dirty Enlightenment configurator

import os
import subprocess

if len(os.sys.argv) != 3 :
	print "Syntax: %s <KeymapLayout> <Language>" %os.sys.argv[0]
	os.sys.exit(1)

KeymapLayout, Language = os.sys.argv[1:3]
if Language.find(".") < 0 :
	if Language == "es_MX" :
		Language += ".ISO-8859-1"
	else :
		Language += ".UTF-8"

e_config = os.getenv("HOME") + "/.e/e/config/standard/e.cfg"
if not os.path.exists(e_config) :
	print "Error: %s does not exist." %e_config
	os.sys.exit(1)

if not os.path.exists("/bin/eet") :
	print "Error: /bin/eet does not exist."
	os.sys.exit(1)


def getKeyboardSettings() :
	XkbModel = "default"
	XkbLayout = "us"
	XkbVariant = "basic"
	if KeymapLayout == "be-latin1" :
		XkbModel = "pc104"
		XkbLayout = "be"
	elif KeymapLayout == "br-abnt2" :
		XkbModel = "abnt2"
		XkbLayout = "br"
	elif KeymapLayout == "br-abnt" :
		XkbModel = "abnt"
		XkbLayout = "br"
	elif KeymapLayout == "fr-latin9" :
		XkbModel = "pc105"
		XkbVariant = "latin9"
		XkbLayout = "fr"
	elif KeymapLayout == "us-acentos" :
		XkbModel = "pc105"
		XkbLayout = "us_intl"
	elif KeymapLayout == "sv-latin1" :
		XkbModel = "pc105"
		XkbLayout = "se"
	elif KeymapLayout == "us" :
		XkbModel = "pc104"
		XkbLayout = "us"
	elif KeymapLayout == "dvorak" :
		XkbModel = "pc105"
		XkbLayout = "dvorak"
	else :
		XkbModel = "pc104"
		XkbLayout = KeymapLayout
	return XkbModel, XkbLayout, XkbVariant

def write_XKB_Layout(newFile) :
	XkbModel, XkbLayout, XkbVariant = getKeyboardSettings()
	newFile.write((' ' * 12) + 'value "name" string: "%s"\n' %XkbLayout)
	newFile.write((' ' * 12) + 'value "model" string: "%s"\n' %XkbModel)
	newFile.write((' ' * 12) + 'value "variant" string: "%s"\n' %XkbVariant)
	newFile.write((' ' *  8) + '}\n')

def write_default_model(newFile, line) :
	XkbModel, XkbLayout, XkbVariant = getKeyboardSettings()
	newFile.write(line.replace('"default"', '"' + XkbModel + '"'))


if not os.path.exists("/tmp/setup") :
	os.mkdir("/tmp/setup")

tempfile = "/tmp/setup/e.cfg"
if os.path.exists(tempfile) :
	os.unlink(tempfile)

subprocess.call(["/bin/eet", "-d", e_config, "config", tempfile])
if not os.path.exists(tempfile) :
	print "Error: failed to create " + tempfile
	os.sys.exit(1)

skipUntil = ""
oldFile = open(tempfile)
newFile = open(tempfile + ".new", "w")

for line in oldFile.readlines() :
	if line.find("en_US.UTF-8") > 0 :
		line = line.replace("en_US.UTF-8", Language)
		newFile.write(line)
	elif line.find("xkb.default_model") > 0 :
		write_default_model(newFile, line)
	elif line.find("E_Config_XKB_Layout") > 0 :
		newFile.write(line)
		write_XKB_Layout(newFile)
		skipUntil = "}"
	elif len(skipUntil) and line.strip().replace("\n", "") != skipUntil :
		continue
	elif len(skipUntil) and line.strip().replace("\n", "") == skipUntil :
		skipUntil = ""
		continue
	else :
		newFile.write(line)
oldFile.close()
newFile.close()

os.unlink(e_config)
subprocess.call(["/bin/eet", "-e", e_config, "config", tempfile + ".new", "1"])
if not os.path.exists(e_config) :
	print "Error: failed to create " + e_config
	os.sys.exit(1)

os.unlink(tempfile + ".new")
os.unlink(tempfile)

# Update $HOME/Desktop
Home = os.getenv("HOME")
Lang = Language.split(".")[0]
if Lang == "pt_BR" :
	os.rename(Home + "/Desktop", Home + "/Área de trabalho")
elif Lang == "hu_HU" :
	os.rename(Home + "/Desktop", Home + "/Asztal")
elif Lang == "es_MX" :
	os.rename(Home + "/Desktop", Home + "/Escritorio")
elif Lang == "de_DE" :
	os.rename(Home + "/Desktop", Home + "/Arbeitsfläche")
