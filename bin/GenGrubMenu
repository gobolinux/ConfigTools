#!/usr/bin/python

import os
import sys
import re

dvorak_keymap="""
# GRUB qwerty->dvorak keymap v1.0 - Matthew Mueller <donut@azstarnet.com>
# latest ver @ http://www.azstarnet.com/~donut/programs/
# paste this in the top of your menu.lst (above any menu items)

# row 1
#setkey backquote backquote
#number keys...
setkey bracketleft minus
setkey braceleft underscore
setkey bracketright equal
setkey braceright plus
#setkey backslash backslash

# row 2
setkey quote q
setkey doublequote Q
setkey comma w
setkey less W
setkey period e
setkey greater E
setkey p r
setkey P R
setkey y t
setkey Y T
setkey f y
setkey F Y
setkey g u
setkey G U
setkey c i
setkey C I
setkey r o
setkey R O
setkey l p
setkey L P
setkey slash bracketleft
setkey question braceleft
setkey equal bracketright
setkey plus braceright

# row 3
#setkey a a
setkey o s
setkey O S
setkey e d
setkey E D
setkey u f
setkey U F
setkey i g
setkey I G
setkey d h
setkey D H
setkey h j
setkey H J
setkey t k
setkey T K
setkey n l
setkey N L
setkey s semicolon
setkey S colon
setkey minus quote
setkey underscore doublequote

# row 4
setkey semicolon z
setkey colon Z
setkey q x
setkey Q X
setkey j c
setkey J C
setkey k v
setkey K V
setkey x b
setkey X B
setkey b n
setkey B N
#setkey m m
setkey w comma
setkey W less
setkey v period
setkey V greater
setkey z slash
setkey Z question
"""

def tr(s) :
	return s


class DeviceHandler :
	def grubName(self, device="") :
		grub_dev = os.popen("dev2grub.sh " + device.replace("/System/Kernel/Devices", "/dev"))
		return grub_dev.readline().strip()

	def getPartitionTable(self) :
		device = ""
		table = []
		f = os.popen("/usr/local/sbin/parted -l -m")
		for line in f.readlines() :
			if line.find(":") < 0 :
				continue
			elif line[0] == '/' :
				device = line.split(":")[0]
			else :
				partition = device + line.strip().split(":")[0]
				partitionType = line.split(":")[4]
				partitionFlags = line.split(":")[-1].replace(";\n","")
				table.append((partition, partitionType, partitionFlags))
		f.close()
		return table

	def getSwapPartition(self) :
		table = self.getPartitionTable()
		for partition in table :
			if 'linux-swap' in partition[1] :
				return partition[0]
		return None


class GrubConfig :
	def __init__(self, bootloaderTarget, targetPartition, keymap='', genGraphicDesktop=True) :
		self.bootloaderTarget = bootloaderTarget
		self.targetPartition = targetPartition
		self.keymap = keymap
		self.genGraphicDesktop = genGraphicDesktop
		self.bootableOtherOsPartitions = []
		self.bootableOtherOsNames = []
		self.grubFormatTarget = ''

	def genBootablePartitionsList(self) :
		swapPartition = DeviceHandler().getSwapPartition()
		self.grubFormatTarget = DeviceHandler("/dev/" + self.targetPartition).grubName()
		if (bootloaderTarget == targetPartition) or (bootloaderTarget == targetPartition[0:3]) :
			self.grubFormatTarget = re.sub('[1-9],','0,', self.grubFormatTarget)

		for partition in DeviceHandler().getPartitionTable() :
			osPartition = DeviceHandler(partition[0]).grubName()
			partitionType = partition[1].lower()
			partitionFlags = partition[2]

			if (osPartition == self.grubFormatTarget) or (partitionFlags.find("boot") < 0) :
				continue
			
			if partitionType.find('fat') == 0 or partitionType.find('ntfs') == 0:
				osName = 'Microsoft Windows'
			elif partitionType.find('aix') > -1:
				osName = 'AIX'
			elif partitionType.find('qnx') > -1 :
				osName = 'QNX'
			elif partitionType.find('hfs+') > -1 or partitionType.find('mac') > -1 :
				osName = 'Darwin'
			elif partitionType.find('bsd') > -1 :
				osName = 'BSD'
			else:
				osName = 'Other OS'
			
			self.bootableOtherOsPartitions.append(osPartition)
			self.bootableOtherOsNames.append(osName)			

	def genMenuFile(self) :
		o = ''
		if self.keymap == 'dvorak' :
			o += dvorak_keymap

		o += '\n'
		o += 'set default=0' + '\n'
		o += '#set timeout=5' + '\n'
	
		#if installer.getValue('EnableGraphicGRUB') :
		#o += 'gfxmenu %s/System/Kernel/Boot/grub/message'%self.grubFormatTarget + '\n'

		if self.genGraphicDesktop :
			o += '\n'
			o += 'menuentry \"'+tr('GoboLinux - Graphic Desktop') + '\" {\n'
			o += '    set root=%s' %(self.grubFormatTarget) + '\n'
			o += '    linux /System/Kernel/Boot/kernel vt.default_utf8=0 gfxpayload=1024x768x24 root=/dev/%s Boot=Graphic'%self.targetPartition + '\n'
			o += '}\n'

		o += '\n'
		o += 'menuentry \"'+tr('GoboLinux - Console') + '\" {\n'
		o += '    set root=%s' %(self.grubFormatTarget) + '\n'
		o += '    linux /System/Kernel/Boot/kernel vt.default_utf8=0 gfxpayload=text root=/dev/%s'%self.targetPartition + '\n'
		o += '}\n'

		o += '\n'
		o += 'menuentry \"'+tr('GoboLinux - Framebuffer Console') + '\" {\n'
		o += '    set root=%s' %(self.grubFormatTarget) + '\n'
		o += '    linux /System/Kernel/Boot/kernel vt.default_utf8=0 gfxpayload=1024x768x24 root=/dev/%s'%self.targetPartition + '\n'
		o += '}\n'
	
		for partition, name in zip(self.bootableOtherOsPartitions, self.bootableOtherOsNames):
			o += '\n'
			o += 'menuentry \"%s at %s'%(name, partition) + '\" {\n'
			o += '    set root=%s' %(partition) + '\n'
			o += '    chainloader +1' + '\n'
			o += '}\n'

		return o

	def generate(self) :
		self.genBootablePartitionsList()
		return self.genMenuFile()


if __name__ == '__main__' :
	if len(sys.argv) < 5 :
		print 'Usage: %s <bootloaderTarget> <targetPartition> <keymap> <genGraphicDesktop>'%sys.argv[0]
		print 'Example: %s hda hda1 us 1'%sys.argv[0]
	else :
		bootloaderTarget = sys.argv[1]
		targetPartition = sys.argv[2]
		keymap = sys.argv[3]
		genGraphicDesktop = sys.argv[4]
		cfg = GrubConfig(bootloaderTarget, targetPartition, keymap, genGraphicDesktop)
		print cfg.generate()
