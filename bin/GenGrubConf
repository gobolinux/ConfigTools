#!/bin/bash

if [ $# != 1 ]
then
	echo "Syntax: $0 <grubDir>"
	exit 1
fi

GRUB_DIR="$1"
mkdir -p "$GRUB_DIR"
shift

# Create the config file
unset GRUB_DISABLE_LINUX_UUID
export GRUB_DISTRIBUTOR="GoboLinux"
export GRUB_DISABLE_RECOVERY="true"
export GRUB_CMDLINE_LINUX="vt.default_utf8=1 brd.rd_nr=0 hid_apple.iso_layout=0 hid_apple.fnmode=2 rootwait"
grub-mkconfig -o "$GRUB_DIR/grub.cfg"

# The kernel doesn't know about /System/Kernel/Devices
GrepReplace -B /System/Kernel/Devices /dev "$GRUB_DIR/grub.cfg"

# Use the 'kernel' symlink in the first boot entry
KERNEL_SYMLINK="/System/Kernel/Boot/kernel"
KERNEL_TARGET="$(readlink -f $KERNEL_SYMLINK)"
KERNEL_TARGET_ESCAPED="$(readlink -f $KERNEL_SYMLINK | sed 's,/,\\/,g')"
KERNEL_RELEASE=$(uname -r)
sed -i -e "0,$KERNEL_TARGET_ESCAPED/s@$KERNEL_TARGET@$KERNEL_SYMLINK@" "$GRUB_DIR/grub.cfg"
sed -i -e "0,/Loading Linux $KERNEL_RELEASE/s@Loading Linux $KERNEL_RELEASE@Loading Linux@" "$GRUB_DIR/grub.cfg"

# Make the OS string prettier
GOBO_VERSION=$(cat /System/Settings/GoboLinuxVersion)
GrepReplace -B "GoboLinux GNU/Linux" "GoboLinux $GOBO_VERSION" "$GRUB_DIR/grub.cfg"
GrepReplace -B "GoboLinux, with Linux[^\'\(]*" "GoboLinux $GOBO_VERSION with VESA framebuffer driver" "$GRUB_DIR/grub.cfg"
GrepReplace -B "driver(" "driver (" "$GRUB_DIR/grub.cfg"

# First option: Enable output on all connected monitors, disable vesafb
sed -i -e '0,/default_utf8=1/s@default_utf8=1@default_utf8=1 video=LVDS-1:e video=HDMI-1:e video=VGA=1:e video=vesafb:off@' "$GRUB_DIR/grub.cfg"

# First option: Quiet output
sed -i -e '0,/default_utf8=1/s@default_utf8=1@default_utf8=1 console=/dev/null@' "$GRUB_DIR/grub.cfg"

# Use the PARTUUID idiom rather than UUID
blkid -s UUID | while read line
do
   THIS_DEV=$(echo "$line" | cut -d: -f1)
   THIS_UUID=$(blkid -s UUID -o value $THIS_DEV)
   THIS_PARTUUID=$(blkid -s PARTUUID -o value $THIS_DEV)
   if [ "$THIS_PARTUUID" ]
   then sed -i "s,root=UUID=$THIS_UUID,root=PARTUUID=$THIS_PARTUUID,g" "$GRUB_DIR/grub.cfg"
   fi
done
