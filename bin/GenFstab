#!/bin/bash

##################################################
# Imports
##################################################

. GoboPath
. ScriptFunctions
Import OptionParser
Import String

##################################################
# Options and configuration
##################################################

#helpOnNoArguments=no
scriptDescription="Automatic fstab generator."
scriptCredits="(C)2003-2007 by Hisham Muhammad et al. Released under the GNU GPL."
scriptUsage=""
Add_Option_Entry "x" "extra-list" "A list of predefined devices and mount points on the format <device>:<mount point>:[<filesystem>]:[<mount options>]:[<comment>], each entry separated by a comma." ""

Parse_Options "$@"

extralist="$(Entry "extra-list")"

################################################################################
# Guess context
################################################################################

# Check if running from Live CD
root=`mount | grep "/Mount/GoboLinux" | head -n 1 | awk '{ print $1 }'`
# Assume it applies to currently running system
if ! [ "$root" ]
then
   root=`mount | grep -i dev | grep " / " | awk '{print $1}'`
fi
root=`readlink -f /$root`

################################################################################
# Header
################################################################################

echo 
echo "# Automatically generated by $0"
echo "# on `date`"
echo

################################################################################
# Virtual filesystems
################################################################################

echo "# Proc filesystem."
echo "proc $goboStatus proc defaults 0 0"
echo

echo "# Sys filesystem."
echo "none /System/Kernel/Objects sysfs defaults 0 0"
echo

echo "# Pts filesystem."
echo "none /System/Kernel/Devices/pts devpts defaults 0 0"
echo

echo "# USB filesystem."
echo "none /System/Kernel/Status/bus/usb usbfs defaults 0 0"
echo

echo "# Shared memory."
echo "none /System/Kernel/Devices/shm tmpfs  defaults 0 0"
echo


################################################################################
# Hard Disk Drives
################################################################################

unset fat
unset win
unset ntfs
function gen_config() {
   lastpart=1
   drive="${1}"
   device="${2}"

   partitions=$(fdisk -l "${device}" 2>&1 | grep "^/")
   partitionlist=$(echo "$partitions" | awk {'print $1'} | tr "\n" " ")
   for partition in $partitionlist
   do
      [ "${partition}" = "" ] && continue

      partitionnumber=$(echo "${partition}" | sed s/".*${drive}\(.*\)"/"\1"/)
      pt=$(fdisk -l | grep "${drive}${partitionnumber}")
      bootableflag=$(echo "${pt}" | awk {'print $2'})
      if [ ! -z "${extralist}" -a "$(echo ${extralist} | grep -q ${drive}${partitionnumber})" ]
      then
         mountpoint=$(echo "${extralist}" | sed -r s/".*${drive}${partitionnumber}\s*:([^:]*):([^:]*):([^:]*):([^,]*).*"/"\1"/)
	 filesystem=$(echo "${extralist}" | sed -r s/".*${drive}${partitionnumber}\s*:([^:]*):([^:]*):([^:]*):([^,]*).*"/"\2"/)
	 mountoptions=$(echo "${extralist}" | sed -r s/".*${drive}${partitionnumber}\s*:([^:]*):([^:]*):([^:]*):([^,]*).*"/"\3"/)
	 comment=$(echo "${extralist}" | sed -r s/".*${drive}${partitionnumber}\s*:([^:]*):([^:]*):([^:]*):([^,]*).*"/"\4"/)
      else
         unset mountpoint
         unset filesystem
         unset mountoptions
         unset comment
      fi         
      if [ "$bootableflag" = "*" ]
      then id=$(echo "${pt}" | awk {'print $6'})
      else id=$(echo "${pt}" | awk {'print $5'})
      fi

      if [ "$partition" = "$root" ]
      then
         comment="# Root partition."
         mountpoint="/"
         filesystem="auto"
         mountoptions="defaults"
         checks="1 0"
      else
         case ${id} in
         "1"|"4"|"6"|"b"|"c"|"e")
            mountname="FAT"
            mountopts="umask=000"
            if mount ${partition} /Mount 2> /dev/null
            then
               if ls /Mount/ | grep -qi "^windows$"
               then
                   mountname="Windows"
                   mountopts="defaults"
               fi
               umount /Mount
            fi
            [ -z "${comment}" ] && comment="# $mountname partition."
            if [ "$mountname" = "Windows" ]
            then
               if [ "$win" ]
               then let win=win+1
               else win=2
               fi
               [ -z "${mountpoint}" ] && mountpoint="/Mount/${mountname}${win}"
            else
               if [ "$fat" ]
               then let fat=fat+1
               else fat=2
               fi
               [ -z "${mountpoint}" ] && mountpoint="/Mount/${mountname}${fat}"
            fi
            filesystem="vfat"
            [ -z "${mountoptions}" ] && mountoptions="${mountopts}"
            checks="1 0"
            ;;
         "7")
            if [ "$ntfs" ]
            then let ntfs=ntfs+1
            else ntfs=2
            fi
            [ -z "${comment}" ] && comment="NTFS partition"
            [ -z "${mountpoint}" ] && mountpoint="/Mount/NTFS${ntfs}"
            filesystem="ntfs-3g" 
            [ -z "${mountoptions}" ] && mountoptions="defaults"
            checks="1 0"
            ;; 
         "82")
            comment="# Swap partition."
            mountpoint="none"
            filesystem="swap"
            mountoptions="pri=1"
            checks="0 0"
            ;;
         "5");;
         *)
            [ -z "${comment}" ] && comment="# Additional partition."
            [ -z "${mountpoint}" ] && mountpoint="/Mount/$(Uppercase ${drive})${partitionnumber}"
            [ -z "${filesystem}" ] && filesystem="auto"
            [ -z "${mountoptions}" ] && mountoptions="defaults"
            checks="1 0"
            ;;
         esac
      fi
      if [ ! "$id" = "5" ]; then
         echo "${comment}" | grep -q "^#" || comment="# ${comment}"
         echo "${comment}"
         echo "${partition} ${mountpoint} ${filesystem} ${mountoptions} ${checks}"
         echo
      fi
  done
}

################################################################################
# IDE and SCSI Drives
################################################################################

drives=(a b c d e f g h i j)
types=(h s)
for t in ${types[@]}; do
   for d in ${drives[@]}; do
      drive="${t}d${d}"
      device=$(readlink -f "/dev/${drive}")
      [ -e "${device}" ] || continue
      gen_config "${drive}" "${device}"
   done
done

################################################################################
# Floppy Drives
################################################################################

floppysettings="auto noauto,users,rw 1 0"
for floppy in 0 1 2 3 4
do
   device=`readlink -f /dev/floppy/$floppy`
   if [ -e "$device" ]
   then
     echo "# Floppy drive."
     if [ $floppy -eq 0 ]
     then mountpoint="/Mount/Floppy"
     else mountpoint="/Mount/Floppy"$[floppy+1]
     fi
     echo "$device $mountpoint $floppysettings" 
     echo
   fi
done

################################################################################
# CD-ROM Drives
################################################################################

cdsettings="auto ro,noauto,users,exec 1 0"
#for cdrom in 0 1 2 3 4
#do
#   device=`readlink -f /dev/cdroms/cdrom$cdrom`
#   if [ -e "$device" ]
#   then
#      echo "# CD-ROM drive."
#     if [ $cdrom -eq 0 ]
#     then mountpoint="/Mount/CD-ROM"
#     else mountpoint="/Mount/CD-ROM"$[cdrom+1]
#     fi
#     echo "$device $mountpoint $cdsettings" 
#     echo
#   fi
#done

for raw_device in /dev/cdrom*
do
   device=`readlink -f $raw_device`
   if [ -e "$device" ]
   then
     echo "# CD-ROM drive."
     if [ "$raw_device" = "/dev/cdrom" ]
     then mountpoint="/Mount/CD-ROM"
     else mountpoint="/Mount/CD-ROM1"
     fi
     echo "$device $mountpoint $cdsettings" 
     echo
   fi
done
