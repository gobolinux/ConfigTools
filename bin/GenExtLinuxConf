#!/usr/bin/python

import os
import sys
import re
import glob

def tr(s) :
	return s

class DeviceHandler :
	def biosId(self, partition) :
		# The BIOS will not expose the way in which the hard disks were enumerated.
		# The best we can do is to assume Linux has enumerated the disks the same
		# way as the BIOS.
		# Here, we assume that 'partition' comes in the form of 'sdXN' or 'hdXN'.
		if len(partition) < 3 :
			print >> sys.stderr, "Warning: partition name is too small (%s)" %partition
			return 0, 1
		disk = ord(partition[2]) - ord('a')
		partition = int(partition[3:])
		return disk, partition

	def getUUID(self, partition) :
		for entry in glob.glob("/dev/disk/by-uuid/*") :
			target = os.readlink(entry)
			entryTarget = os.path.basename(target)
			if entryTarget == partition :
				return os.path.basename(entry)
		return ""

	def getPartitionTable(self) :
		device = ""
		table = []
		f = os.popen("/usr/local/sbin/parted -l -m")
		for line in f.readlines() :
			if line.find(":") < 0 :
				continue
			elif line[0] == '/' :
				device = os.path.basename(line.split(":")[0])
			else :
				partition = device + line.strip().split(":")[0]
				partitionType = line.split(":")[4]
				partitionFlags = line.split(":")[-1].replace(";\n","")
				partitionUUID = self.getUUID(partition)
				table.append((partition, partitionType, partitionUUID, partitionFlags))
		f.close()
		return table

	def getSwapPartition(self) :
		table = self.getPartitionTable()
		for partition in table :
			if 'linux-swap' in partition[1] :
				return partition[0]
		return None


class ExtLinuxConf :
	def __init__(self, bootloaderTarget, targetPartition) :
		self.bootloaderTarget = bootloaderTarget
		self.targetPartition = targetPartition
		self.bootableOtherOsPartitions = []
		self.bootableOtherOsNames = []

	def __genBootablePartitionsList(self) :
		swapPartition = DeviceHandler().getSwapPartition()

		for partition in DeviceHandler().getPartitionTable() :
			osPartition = partition[0]
			partitionType = partition[1].lower()
			partitionUUID = partition[2]
			partitionFlags = partition[3]

			if (osPartition == self.targetPartition) or (partitionFlags.find("boot") < 0) :
				continue
			
			if partitionType.find('fat') == 0 or partitionType.find('ntfs') == 0:
				osName = 'Microsoft Windows'
			elif partitionType.find('aix') > -1:
				osName = 'AIX'
			elif partitionType.find('qnx') > -1 :
				osName = 'QNX'
			elif partitionType.find('hfs+') > -1 or partitionType.find('mac') > -1 :
				osName = 'Darwin'
			elif partitionType.find('bsd') > -1 :
				osName = 'BSD'
			else:
				osName = 'Other OS'
			
			self.bootableOtherOsPartitions.append(osPartition)
			self.bootableOtherOsNames.append(osName)			

	def __genMenuFile(self) :
		o = ''
		o += '\n'
		o += 'PROMPT 1\n'
		o += 'TIMEOUT 50\n'
		o += '\n'
		o += 'UI vesamenu.c32\n'
		o += 'MENU TITLE Boot options\n'
		#o += 'MENU BACKGROUND gobo.lss\n'
		o += 'MENU CLEAR\n'

		o += '\n'
		o += 'LABEL gobo015\n'
		o += '  MENU LABEL GoboLinux 015\n'
		o += '  LINUX /System/Kernel/Boot/kernel\n'
		o += '  APPEND root=/dev/%s vt.default_utf8=1 gfxpayload=1024x768x24 Boot=Graphic\n' %self.targetPartition

		o += '\n'
		o += 'LABEL gobo015_text\n'
		o += '  MENU LABEL GoboLinux 015 (text mode)\n'
		o += '  LINUX /System/Kernel/Boot/kernel\n'
		o += '  APPEND root=/dev/%s vt.default_utf8=1 gfxpayload=text\n' %self.targetPartition

		for partition, name in zip(self.bootableOtherOsPartitions, self.bootableOtherOsNames):
			biosDisk, biosPartition = DeviceHandler().biosId(partition)
			o += '\n'
			o += 'LABEL %s\n' %(name.split()[-1].lower())
			o += '  MENU LABEL %s at %s\n' %(name, partition)
			o += '  KERNEL chain.c32\n'
			o += '  APPEND hd%d %d\n' %(biosDisk, biosPartition)

		return o

	def generate(self) :
		self.__genBootablePartitionsList()
		return self.__genMenuFile()


if __name__ == '__main__' :
	if len(sys.argv) < 3 :
		print 'Usage: %s <bootloaderTarget> <targetPartition>'%sys.argv[0]
		print 'Example: %s hda hda1'%sys.argv[0]
	else :
		bootloaderTarget = sys.argv[1]
		targetPartition = sys.argv[2]
		cfg = ExtLinuxConf(bootloaderTarget, targetPartition)
		print cfg.generate()
